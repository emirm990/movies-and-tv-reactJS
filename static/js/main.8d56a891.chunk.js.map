{"version":3,"sources":["components/Item.js","components/Movies.js","components/MovieDetail.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["Item","_this","this","react_default","a","createElement","Link","to","pathname","id","props","tvOrMovie","onClick","handleClick","className","src","alt","title","Component","Movies","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","results","clickedId","searchValue","getId","bind","assertThisInitialized","moviesOrTv","fetch","response","json","setState","event","target","value","length","console","log","undefined","history","location","fetchMovies","push","_this2","clearSearch","onChange","e","search","type","placeholder","slice","map","result","src_components_Item","key","poster_path","name","MovieDetails","trailer","poster","overview","Details","MovieDetail","App","BrowserRouter","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TA2BeA,0LAtBJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,GAAI,CACFC,SAAU,WACVC,GAAIP,KAAKQ,MAAMD,GACfE,UAAWT,KAAKQ,MAAMC,WAExBC,QAAS,SAAAH,GAAE,OAAIR,EAAKS,MAAMG,YAAYZ,EAAKS,MAAMD,KACjDK,UAAU,8CAEVX,EAAAC,EAAAC,cAAA,OACES,UAAU,yBACVC,IAAK,kCAAoCb,KAAKQ,MAAMK,IACpDC,IAAKd,KAAKQ,MAAMO,QAElBd,EAAAC,EAAAC,cAAA,MAAIS,UAAU,+BAA+BZ,KAAKQ,MAAMO,eAjB7CC,cC+HJC,qBA9Hb,SAAAA,EAAYT,GAAO,IAAAT,EAAA,OAAAmB,OAAAC,EAAA,EAAAD,CAAAlB,KAAAiB,IACjBlB,EAAAmB,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAtB,KAAMQ,KAGRe,MAAQ,CACNC,QAAS,KACTf,UAAW,KACXgB,UAAW,KACXC,YAAa,IANb3B,EAAK4B,MAAQ5B,EAAK4B,MAAMC,KAAXV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAnB,KAFIA,mHAWD+B,iFACH,4CACQC,MACnB,gCACED,EACA,2FAHAE,kBAOaA,EAASC,cAAtBA,SACJjC,KAAKkC,SAAS,CAAEV,QAASS,EAAKT,QAASf,UAAWqB,8KAGvCK,8EACXnC,KAAKkC,SAAS,CACZR,YAAaS,EAAMC,OAAOC,UAExBF,EAAMC,OAAOC,MAAMC,OAAS,mCACTP,MACnB,uCACE/B,KAAKuB,MAAMd,UACX,kEACA0B,EAAMC,OAAOC,MACb,6CALAL,kBAOaA,EAASC,cAAtBA,SACJjC,KAAKkC,SAAS,CACZV,QAASS,EAAKT,mJAKlBxB,KAAKkC,SAAS,CACZR,YAAa,mCAGXnB,GACJgC,QAAQC,IAAIjC,GACZP,KAAKkC,SAAS,CAAET,UAAWlB,qDAIiBkC,IAAxCzC,KAAKQ,MAAMkC,QAAQC,SAASnB,QAC9BxB,KAAK4C,YAAY,MAEjB5C,KAAKkC,SAAS,CACZV,QAASxB,KAAKQ,MAAMkC,QAAQC,SAASnB,QACrCf,UAAWT,KAAKQ,MAAMkC,QAAQC,SAASlC,UACvCiB,YAAa1B,KAAKQ,MAAMkC,QAAQC,SAASjB,6DAK7C1B,KAAKQ,MAAMkC,QAAQG,KAAK7C,KAAKuB,wCAEtB,IAAAuB,EAAA9C,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,6BACbX,EAAAC,EAAAC,cAAA,UACES,UAC2B,UAAzBZ,KAAKuB,MAAMd,UAAwB,kBAAoB,MAEzDC,QAAS,WACPoC,EAAKF,YAAY,SACjBE,EAAKC,gBANT,UAWA9C,EAAAC,EAAAC,cAAA,UACES,UAC2B,OAAzBZ,KAAKuB,MAAMd,UAAqB,kBAAoB,MAEtDC,QAAS,WACPoC,EAAKF,YAAY,MACjBE,EAAKC,gBANT,aAYF9C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,wBACbX,EAAAC,EAAAC,cAAA,SACE6C,SAAU,SAAAC,GAAC,OAAIH,EAAKI,OAAOD,IAC3BrC,UAAU,eACVL,GAAG,SACH4C,KAAK,SACLC,YAAY,SACZf,MAAOrC,KAAKuB,MAAMG,eAGtBzB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mBACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACZZ,KAAKuB,OACJvB,KAAKuB,MAAMC,SACXxB,KAAKuB,MAAMC,QACR6B,MAAM,EAAG,IACTC,IAAI,SAAAC,GAAM,OACTtD,EAAAC,EAAAC,cAACqD,EAAD,CACE7C,YAAamC,EAAKnB,MAClB8B,IAAKF,EAAOhD,GACZA,GAAIgD,EAAOhD,GACXE,UAAWqC,EAAKvB,MAAMd,UACtBI,IAAK0C,EAAOG,YACZ3C,MAAOwC,EAAOxC,OAASwC,EAAOI,mBArH7B3C,cCqDN4C,6MAtDbrC,MAAQ,CACNsC,QAAS,UACTC,OAAQ,SACRH,KAAM,OACNI,SAAU,sHAEHxD,EAAIE,iFACE,4CACQsB,MACnB,gCACEtB,EACA,IACAF,EACA,0EALAyB,kBASaA,EAASC,cAAtBA,SACJM,QAAQC,IAAIP,GACZjC,KAAKkC,SAAS,CACZ2B,QAAS5B,EAAK4B,QACdC,OAAQ7B,EAAKyB,YACbC,KAAM1B,EAAK0B,MAAQ1B,EAAKlB,MACxBgD,SAAU9B,EAAK8B,WAEjBxB,QAAQC,IAAIxC,KAAKuB,yJAGjBvB,KAAKO,GAAGP,KAAKQ,MAAMD,GAAIP,KAAKQ,MAAMC,4CAGlC,OACER,EAAAC,EAAAC,cAAA,OAAKS,UAAU,6BACbX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,GAAI,KACRJ,EAAAC,EAAAC,cAAA,UAAQS,UAAU,mBAAlB,SAEFX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,uBACbX,EAAAC,EAAAC,cAAA,OACES,UAAU,yBACVC,IAAK,kCAAoCb,KAAKuB,MAAMuC,OACpDhD,IAAKd,KAAKuB,MAAMoC,OAElB1D,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,+BAA+BZ,KAAKuB,MAAMoC,MACxD1D,EAAAC,EAAAC,cAAA,KAAGS,UAAU,wBAAwBZ,KAAKuB,MAAMwC,qBA9CnC/C,aC0BZgD,6MAbbzC,MAAQ,CACNC,QAAS,yFAXTe,QAAQC,IAAI,UAAWxC,KAAKQ,MAAMkC,QAAQC,SAASnB,SACnDxB,KAAKkC,SAAS,CACZV,QAASxB,KAAKQ,MAAMkC,QAAQC,SAASnB,QACrCf,UAAWT,KAAKQ,MAAMkC,QAAQC,SAASlC,UACvCiB,YAAa1B,KAAKQ,MAAMkC,QAAQC,SAASjB,6DAI3C1B,KAAKQ,MAAMkC,QAAQG,KAAK7C,KAAKuB,wCAM7B,OACEtB,EAAAC,EAAAC,cAAC8D,EAAD,CACE1D,GAAIP,KAAKQ,MAAMmC,SAASpC,GACxBE,UAAWT,KAAKQ,MAAMmC,SAASlC,mBAnBjBO,qCCePkD,mLAXX,OACEjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,KACElE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,KACEnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWtD,EAAQuD,OAAK,IACxCvE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWP,aAN1BhD,mBCOEyD,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCXNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d56a891.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Item.css\";\r\n\r\nclass Item extends Component {\r\n  render() {\r\n    return (\r\n      <Link\r\n        to={{\r\n          pathname: \"/details\",\r\n          id: this.props.id,\r\n          tvOrMovie: this.props.tvOrMovie\r\n        }}\r\n        onClick={id => this.props.handleClick(this.props.id)}\r\n        className='card col-6 col-sm-6 col-md-4 col-lg-3 mb-3'\r\n      >\r\n        <img\r\n          className='card-img-top img-fluid'\r\n          src={\"http://image.tmdb.org/t/p/w400/\" + this.props.src}\r\n          alt={this.props.title}\r\n        />\r\n        <h5 className='card-title text-center mt-3'>{this.props.title}</h5>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from \"react\";\r\nimport Item from \"./Item.js\";\r\nimport \"./Movies.css\";\r\n\r\nclass Movies extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getId = this.getId.bind(this);\r\n  }\r\n  state = {\r\n    results: null,\r\n    tvOrMovie: \"tv\",\r\n    clickedId: null,\r\n    searchValue: \"\"\r\n  };\r\n\r\n  async fetchMovies(moviesOrTv) {\r\n    let apiKey = \"fdcceaee503d65d10f646f384fbc9aec\";\r\n    let response = await fetch(\r\n      \"https://api.themoviedb.org/3/\" +\r\n        moviesOrTv +\r\n        \"/top_rated?api_key=\" +\r\n        apiKey +\r\n        \"&language=en-US&page=1\"\r\n    );\r\n    let json = await response.json();\r\n    this.setState({ results: json.results, tvOrMovie: moviesOrTv });\r\n  }\r\n\r\n  async search(event) {\r\n    this.setState({\r\n      searchValue: event.target.value\r\n    });\r\n    if (event.target.value.length > 3) {\r\n      let response = await fetch(\r\n        \"https://api.themoviedb.org/3/search/\" +\r\n          this.state.tvOrMovie +\r\n          \"?api_key=fdcceaee503d65d10f646f384fbc9aec&language=en-US&query=\" +\r\n          event.target.value +\r\n          \"&page=1&include_adult=false\"\r\n      );\r\n      let json = await response.json();\r\n      this.setState({\r\n        results: json.results\r\n      });\r\n    }\r\n  }\r\n  clearSearch() {\r\n    this.setState({\r\n      searchValue: \"\"\r\n    });\r\n  }\r\n  getId(id) {\r\n    console.log(id);\r\n    this.setState({ clickedId: id });\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.history.location.results === undefined) {\r\n      this.fetchMovies(\"tv\");\r\n    } else {\r\n      this.setState({\r\n        results: this.props.history.location.results,\r\n        tvOrMovie: this.props.history.location.tvOrMovie,\r\n        searchValue: this.props.history.location.searchValue\r\n      });\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.props.history.push(this.state);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='container-fluid mb-3 mt-3'>\r\n          <button\r\n            className={\r\n              this.state.tvOrMovie === \"movie\" ? \"btn btn-primary\" : \"btn\"\r\n            }\r\n            onClick={() => {\r\n              this.fetchMovies(\"movie\");\r\n              this.clearSearch();\r\n            }}\r\n          >\r\n            Movies\r\n          </button>\r\n          <button\r\n            className={\r\n              this.state.tvOrMovie === \"tv\" ? \"btn btn-primary\" : \"btn\"\r\n            }\r\n            onClick={() => {\r\n              this.fetchMovies(\"tv\");\r\n              this.clearSearch();\r\n            }}\r\n          >\r\n            TV Shows\r\n          </button>\r\n        </div>\r\n        <div className='container-fluid mb-3'>\r\n          <input\r\n            onChange={e => this.search(e)}\r\n            className='form-control'\r\n            id='search'\r\n            type='search'\r\n            placeholder='search'\r\n            value={this.state.searchValue}\r\n          />\r\n        </div>\r\n        <div className='container-fluid'>\r\n          <div className='row'>\r\n            {this.state &&\r\n              this.state.results &&\r\n              this.state.results\r\n                .slice(0, 10)\r\n                .map(result => (\r\n                  <Item\r\n                    handleClick={this.getId}\r\n                    key={result.id}\r\n                    id={result.id}\r\n                    tvOrMovie={this.state.tvOrMovie}\r\n                    src={result.poster_path}\r\n                    title={result.title || result.name}\r\n                  />\r\n                ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movies;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass MovieDetails extends Component {\r\n  state = {\r\n    trailer: \"trailer\",\r\n    poster: \"poster\",\r\n    name: \"name\",\r\n    overview: \"overview\"\r\n  };\r\n  async id(id, tvOrMovie) {\r\n    let apiKey = \"fdcceaee503d65d10f646f384fbc9aec\";\r\n    let response = await fetch(\r\n      \"https://api.themoviedb.org/3/\" +\r\n        tvOrMovie +\r\n        \"/\" +\r\n        id +\r\n        \"?api_key=\" +\r\n        apiKey +\r\n        \"&language=en-US\"\r\n    );\r\n    let json = await response.json();\r\n    console.log(json);\r\n    this.setState({\r\n      trailer: json.trailer,\r\n      poster: json.poster_path,\r\n      name: json.name || json.title,\r\n      overview: json.overview\r\n    });\r\n    console.log(this.state);\r\n  }\r\n  componentDidMount() {\r\n    this.id(this.props.id, this.props.tvOrMovie);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='container-fluid mb-3 mt-3'>\r\n        <Link to={\"/\"}>\r\n          <button className='btn btn-primary'>Back</button>\r\n        </Link>\r\n        <div className='row'>\r\n          <div className='card col-4 offset-4'>\r\n            <img\r\n              className='card-img-top img-fluid'\r\n              src={\"http://image.tmdb.org/t/p/w400/\" + this.state.poster}\r\n              alt={this.state.name}\r\n            />\r\n            <div className='card-body'>\r\n              <h4 className='card-title text-center mt-3'>{this.state.name}</h4>\r\n              <p className='card-text px-3 -pb-2'>{this.state.overview}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieDetails;\r\n","import React, { Component } from \"react\";\r\nimport MovieDetail from \"./MovieDetail\";\r\n\r\nclass Details extends Component {\r\n  componentDidMount() {\r\n    console.log(\"mounted\", this.props.history.location.results);\r\n    this.setState({\r\n      results: this.props.history.location.results,\r\n      tvOrMovie: this.props.history.location.tvOrMovie,\r\n      searchValue: this.props.history.location.searchValue\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    this.props.history.push(this.state);\r\n  }\r\n  state = {\r\n    results: null\r\n  };\r\n  render() {\r\n    return (\r\n      <MovieDetail\r\n        id={this.props.location.id}\r\n        tvOrMovie={this.props.location.tvOrMovie}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Details;\r\n","import React, { Component } from \"react\";\r\nimport Movies from \"./components/Movies\";\r\nimport Details from \"./components/Details\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path='/' component={Movies} exact />\r\n          <Route path='/details' component={Details} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}